---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/ruby/json/refs/tags/v2.9.0/CHANGES.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '24613'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"16fb96b2f8a07d47745f0089e53b5f8053e47f23d6b7d8ddc4e94532698cf132"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - B4BA:2202DB:1510792:1623117:675BB0E1
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 13 Dec 2024 04:09:15 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-pao-kpao1770065-PAO
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1734062956.615328,VS0,VE181
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 3bd582bd0e4c20961b1f2ea3c3679c717eebfbb8
      Expires:
      - Fri, 13 Dec 2024 04:14:15 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBDaGFuZ2VzCgojIyMgMjAyNC0xMS0xNCAoMi44LjIpCgoqIGBKU09OLmxvYWRfZmlsZWAgZXhwbGljdGx5IHJlYWQgdGhlIGZpbGUgYXMgVVRGLTguCgojIyMgMjAyNC0xMS0wNiAoMi44LjEpCgoqIEZpeCB0aGUgamF2YSBwYWNrYWdlcyB0byBpbmNsdWRlIHRoZSBleHRlbnNpb24uCgojIyMgMjAyNC0xMS0wNiAoMi44LjApCgoqIEVtaXQgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gYEpTT04ubG9hZGAgY3JlYXRlIGN1c3RvbSB0eXBlcyB3aXRob3V0IHRoZSBgY3JlYXRlX2FkZGl0aW9uc2Agb3B0aW9uIGJlaW5nIGV4cGxpY3RseSBlbmFibGVkLgogICogUHJlZmVyIHRvIHVzZSBgSlNPTi51bnNhZmVfbG9hZChzdHJpbmcpYCBvciBgSlNPTi5sb2FkKHN0cmluZywgY3JlYXRlX2FkZGl0aW9uczogdHJ1ZSlgLgoqIEVtaXQgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gc2VyaWFsaXppbmcgdmFsaWQgVVRGLTggc3RyaW5ncyBlbmNvZGVkIGluIGBBU0NJSV84QklUYCBha2EgYEJJTkFSWWAuCiogQnVtcCByZXF1aXJlZCBSdWJ5IHZlcnNpb24gdG8gMi43LgoqIEFkZCBzdXBwb3J0IGZvciBvcHRpb25hbGx5IHBhcnNpbmcgdHJhaWxpbmcgY29tbWFzLCB2aWEgYGFsbG93X3RyYWlsaW5nX2NvbW1hOiB0cnVlYCwgd2hpY2ggaW4gY3VuanVuY3Rpb24gd2l0aCB0aGUKICBwcmUtZXhpc3Rpbmcgc3VwcG9ydCBmb3IgY29tbWVudHMsIG1ha2UgaXQgc3VpdGFibGUgdG8gcGFyc2UgYGpzb25jYCBkb2N1bWVudHMuCiogTWFueSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMgdG8gYEpTT04ucGFyc2VgIGFuZCBgSlNPTi5sb2FkYCwgdXAgdG8gYDEuN3hgIGZhc3RlciBvbiByZWFsIHdvcmxkIGRvY3VtZW50cy4KKiBTb21lIG1pbm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyB0byBgSlNPTi5kdW1wYCBhbmQgYEpTT04uZ2VuZXJhdGVgLgoqIGBKU09OLnByZXR0eV9nZW5lcmF0ZWAgbm8gbG9uZ2VyIGluY2x1ZGUgbmV3bGluZSBpbnNpZGUgZW1wdHkgb2JqZWN0IGFuZCBhcnJheXMuIAoKIyMjIDIwMjQtMTEtMDQgKDIuNy42KQoKKiBGaXggYSByZWdyZXNzaW9uIGluIEpTT04uZ2VuZXJhdGUgd2hlbiBkZWFsaW5nIHdpdGggSGFzaCBrZXlzIHRoYXQgYXJlIHN0cmluZyBzdWJjbGFzc2VzLCBjYWxsIGB0b19qc29uYCBvbiB0aGVtLgoKIyMjIDIwMjQtMTAtMjUgKDIuNy41KQoKKiBGaXggYSBtZW1vcnkgbGVhayB3aGVuIGAjdG9fanNvbmAgbWV0aG9kcyByYWlzZSBhbiBleGNlcHRpb24uCiogR3JhY2VmdWxseSBoYW5kbGUgZm9ybWF0dGluZyBjb25maWdzIGJlaW5nIHNldCB0byBgbmlsYCBpbnN0ZWFkIG9mIGAiImAuCiogV29ya2Fyb3VuZCBhbm90aGVyIGlzc3VlIGNhdXNlZCBieSBjb25mbGljdGluZyB2ZXJzaW9ucyBvZiBib3RoIGBqc29uX3B1cmVgIGFuZCBganNvbmAgYmVpbmcgbG9hZGVkLgoKIyMjIDIwMjQtMTAtMjUgKDIuNy40KQoKKiBXb3JrYXJvdW5kIGEgYnVnIGluIDMuNC44IGFuZCBvbGRlciBodHRwczovL2dpdGh1Yi5jb20vcnVieWdlbXMvcnVieWdlbXMvcHVsbC82NDkwLgogIFRoaXMgYnVnIHdvdWxkIGNhdXNlIHNvbWUgZ2VtcyB3aXRoIG5hdGl2ZSBleHRlbnNpb24gdG8gZmFpbCBkdXJpbmcgY29tcGlsYXRpb24uCiogV29ya2Fyb3VuZCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgYGpzb25gIGFuZCBganNvbl9wdXJlYCBiZWluZyBsb2FkZWQgKG5vdCBvZmZpY2lhbGx5IHN1cHBvcnRlZCkuCiogTWFrZSBganNvbl9wdXJlYCBSYWN0b3IgY29tcGF0aWJsZS4gCgojIyMgMjAyNC0xMC0yNCAoMi43LjMpCgoqIE51bWVyb3VzIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnMgaW4gYEpTT04uZ2VuZXJhdGVgIGFuZCBgSlNPTi5kdW1wYCAodXAgdG8gMiB0aW1lcyBmYXN0ZXIpLgoqIExpbWl0IHRoZSBzaXplIG9mIFBhcnNlckVycm9yIGV4Y2VwdGlvbiBtZXNzYWdlcywgb25seSBpbmNsdWRlIHVwIHRvIDMyIGJ5dGVzIG9mIHRoZSB1bnBhcnNlYWJsZSBzb3VyY2UuCiogRml4IGpzb24tcHVyZSdzIGBPYmplY3QjdG9fanNvbmAgdG8gYWNjZXB0IG5vbiBzdGF0ZSBhcmd1bWVudHMgCiogRml4IG11bHRpbGluZSBjb21tZW50IHN1cHBvcnQgaW4gYGpzb24tcHVyZWAuCiogRml4IGBKU09OLnBhcnNlYCB0byBubyBsb25nZXIgbXV0YXRlIHRoZSBhcmd1bWVudCBlbmNvZGluZyB3aGVuIHBhc3NlZCBhbiBBU0NJSS04QklUIHN0cmluZy4KKiBGaXggYFN0cmluZyN0b19qc29uYCB0byByYWlzZSBvbiBpbnZhbGlkIGVuY29kaW5nIGluIGBqc29uLXB1cmVgLgoqIERlbGV0ZSBjb2RlIHRoYXQgd2FzIGJhc2VkIG9uIENWVFVURi4KKiBVc2UgdGhlIHB1cmUtUnVieSBnZW5lcmF0b3Igb24gVHJ1ZmZsZVJ1YnkuCiogRml4IGBzdHJpY3RgIG1vZGUgaW4gYGpzb24tcHVyZWAgdG8gbm90IGJyZWFrIG9uIEludGVnZXIuCgojIyMgMjAyNC0wNC0wNCAoMi43LjIpCgoqIFVzZSByYl9zeW0yc3RyIGluc3RlYWQgb2YgU1lNMklEICM1NjEKKiBGaXggbWVtb3J5IGxlYWsgd2hlbiBleGNlcHRpb24gaXMgcmFpc2VkIGR1cmluZyBKU09OIGdlbmVyYXRpb24gIzU3NAoqIFJlbW92ZSByZWZlcmVuY2VzIHRvICIxOSIgbWV0aG9kcyBpbiBKUnVieSAjNTc2CiogTWFrZSBPcGVuU3RydWN0IHN1cHBvcnQgYXMgb3B0aW9uYWwgYnkgQGhzYnQgaW4gIzU2NQoqIEF1dG9sb2FkIEpTT046OkdlbmVyaWNPYmplY3QgdG8gYXZvaWQgcmVxdWlyZSBvc3RydWN0IHdhcm5pbmcgaW4gUnVieSAzLjQgIzU3NwoqIFdhcm4gdG8gaW5zdGFsbCBvc3RydWN0IGlmIGpzb24gY291bGRuJ3QgbG9hZCBpdCBieSBAaHNidCAjNTc4CgojIyMgMjAyMy0xMi0wNSAoMi43LjEpCgoqIEpTT04uZHVtcDogaGFuZGxlIHVuZW5jbG9zZWQgaGFzaGVzIHJlZ3Jlc3Npb24gIzU1NAoqIE92ZXJsb2FkIGt3YXJncyBpbiBKU09OLmR1bXAgIzU1NgoqIFtET0NdIFJEb2MgZm9yIGFkZGl0aW9ucyAjNTU3CiogRml4IEpTT04uZHVtcCBvdmVybG9hZCBjb21iaW5hdGlvbiAjNTU4CgojIyMgMjAyMy0xMi0wMSAoMi43LjApCgoqIEFkZCBhIHN0cmljdCBvcHRpb24gdG8gR2VuZXJhdG9yICM1MTkKKiBgZXNjYXBlX3NsYXNoYCBvcHRpb24gd2FzIHJlbmFtZWQgYXMgYHNjcmlwdF9zYWZlYCBhbmQgbm93IGFsc28gZXNjYXBlIFUrMjAyOCBhbmQgVSsyMDI5LiBgZXNjYXBlX3NsYXNoYCBpcyBub3cgYW4gYWxpYXMgb2YgYHNjcmlwdF9zYWZlYCAjNTI1CiogUmVtb3ZlIHVubmVjZXNzYXJ5IGluaXRpYWxpemF0aW9uIG9mIGNyZWF0ZV9pZCBpbiBKU09OLnBhcnNlKCkgIzQ1NAoqIEltcHJvdmVtZW50cyB0byBIYXNoI3RvX2pzb24gaW4gcHVyZSBpbXBsZW1lbnRhdGlvbiBnZW5lcmF0b3IgIzIwMwoqIFVzZSBydWJ5X3hmcmVlIHRvIGZyZWUgYnVmZmVycyAjNTE4CiogRml4ICJ1bmV4cGVjdGVkIHRva2VuIiBvZmZzZXQgZm9yIEluZmluaXR5ICM1MDcKKiBBdm9pZCB1c2luZyBkZXByZWNhdGVkIEJpZ0RlY2ltYWwubmV3IG9uIEpSdWJ5ICM1NDYKKiBSZW1vdmVkIGNvZGUgZm9yIFJ1YnkgMS44ICM1NDAKKiBSZW5hbWUgSlNPTjo6UGFyc2VFcnJvciB0byBKU09OOlBhcnNlckVycm9yICM1MzAKKiBDYWxsIHN1cGVyIGluIGluY2x1ZGVkIGhvb2sgIzQ4NgoqIEpSdWJ5IHJlcXVpcmVzIGEgbWluaW11bSBvZiBKYXZhIDggIzUxNgoqIEFsd2F5cyBpbmRlbnQgZXZlbiBpZiBlbXB0eSAjNTE3CgojIyMgMjAyMi0xMS0zMCAoMi42LjMpCgoqIGJ1Z2ZpeCBqc29uL3B1cmUgbWl4aW5nIGVzY2FwZWQgd2l0aCBsaXRlcmFsIHVuaWNvZGUgcmFpc2VzIEVuY29kaW5nOjpDb21wYXRpYmlsaXR5RXJyb3IgIzQ4MwoqIFN0b3AgaW5jbHVkaW5nIHRoZSBwYXJzZXIgc291cmNlIF9fTElORV9fIGluIGV4Y2VwdGlvbnMgIzQ3MAoKIyMjIDIwMjItMTEtMTcgKDIuNi4yKQoKKiBSZW1vdmUgdW5rbm93biBrZXl3b3JkIGFyZyBmcm9tIERhdGVUaW1lLnBhcnNlICM0ODgKKiBJZ25vcmUgamF2YSBhcnRpZmFjdHMgYnkgQGhzYnQgIzQ4OQoqIEZpeCBwYXJzZXIgYnVnIGZvciBlbXB0eSBzdHJpbmcgYWxsb2NhdGlvbiAjNDk2CgojIyMgMjAyMS0xMC0yNCAoMi42LjEpCgoqIFJlc3RvcmUgdmVyc2lvbi5yYiB3aXRoIDIuNi4xCgojIyMgMjAyMS0xMC0xNCAoMi42LjApCgoqIFVzZSBgcmJfZW5jX2ludGVybmVkX3N0cmAgaWYgYXZhaWxhYmxlIHRvIHJlZHVjZSBhbGxvY2F0aW9ucyBpbiBgZnJlZXplOiB0cnVlYCBtb2RlLiAjNDUxLgoqIEJ1bXAgcmVxdWlyZWRfcnVieV92ZXJzaW9uIHRvIDIuMy4KKiBGaXggY29tcGF0aWJpbGl0eSB3aXRoIGBHQy5jb21wYWN0YC4KKiBGaXggc29tZSBjb21waWxhdGlvbiB3YXJuaW5ncy4gIzQ2OQoKIyMgMjAyMC0xMi0yMiAoMi41LjEpCgoqIFJlc3RvcmUgdGhlIGNvbXBhdGliaWxpdHkgZm9yIGNvbnN0YW50cyBvZiBKU09OIGNsYXNzLgoKIyMgMjAyMC0xMi0yMiAoMi41LjApCgoqIFJlYWR5IHRvIFJhY3Rvci1zYWZlIGF0IFJ1YnkgMy4wLgoKIyMgMjAyMC0xMi0xNyAoMi40LjEpCgoqIFJlc3RvcmUgdmVyc2lvbi5yYiB3aXRoIDIuNC4xCgojIyAyMDIwLTEyLTE1ICgyLjQuMCkKCiogSW1wbGVtZW50IGEgZnJlZXplOiBwYXJzZXIgb3B0aW9uICM0NDcKKiBGaXggYW4gaXNzdWUgd2l0aCBnZW5lcmF0ZV9wcmV0dHkgYW5kIGVtcHR5IG9iamVjdHMgaW4gdGhlIFJ1YnkgYW5kIEphdmEgaW1wbGVtZW50YXRpb25zICM0NDkKKiBGaXggSlNPTi5sb2FkX2ZpbGUgZG9jICM0NDgKKiBGaXggcHVyZSBwYXJzZXIgd2l0aCB1bmNsb3NlZCBhcnJheXMgLyBvYmplY3RzICM0MjUKKiBidW5kbGUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgZ2VtICM0NDQKKiBBZGQgYW4gb3B0aW9uIHRvIGVzY2FwZSBmb3J3YXJkIHNsYXNoIGNoYXJhY3RlciAjNDA1CiogUkRvYyBmb3IgSlNPTiAjNDM5ICM0NDYgIzQ0MiAjNDM0ICM0MzMgIzQzMAoKIyMgMjAyMC0wNi0zMCAoMi4zLjEpCgoqIFNwZWxsaW5nIGFuZCBncmFtbWFyIGZpeGVzIGZvciBjb21tZW50cy4gUHVsbCByZXF1ZXN0ICMxOTEgYnkgSm9zaAogIEtsaW5lLgoqIEVuaGFuY2UgZ2VuZXJpYyBKU09OIGFuZCAjZ2VuZXJhdGUgZG9jcy4gUHVsbCByZXF1ZXN0ICMzNDcgYnkgVmljdG9yCiAgU2hlcGVsZXYuCiogQWRkIDpub2RvYzogZm9yIEdlbmVyYXRvck1ldGhvZHMuIFB1bGwgcmVxdWVzdCAjMzQ5IGJ5IFZpY3RvciBTaGVwZWxldi4KKiBCYXNlbGluZSBjaGFuZ2VzIHRvIGhlbHAgKEpSdWJ5KSBkZXZlbG9wbWVudC4gUHVsbCByZXF1ZXN0ICMzNzEgYnkgS2Fyb2wKICBCdWNlay4KKiBBZGQgbWV0YWRhdGEgZm9yIHJ1YnlnZW1zLm9yZy4gUHVsbCByZXF1ZXN0ICMzNzkgYnkgQWxleGFuZHJlIFpBTk5JLgoqIFJlbW92ZSBpbnZhbGlkIEpTT04uZ2VuZXJhdGUgZGVzY3JpcHRpb24gZnJvbSBKU09OIG1vZHVsZSByZG9jLiBQdWxsCiAgcmVxdWVzdCAjMzg0IGJ5IEplcmVteSBFdmFucy4KKiBUZXN0IHdpdGggVHJ1ZmZsZVJ1YnkgaW4gQ0kuIFB1bGwgcmVxdWVzdCAjNDAyIGJ5IEJlbm9pdCBEYWxvemUuCiogUmRvYyBlbmhhbmNlbWVudHMuIFB1bGwgcmVxdWVzdCAjNDEzIGJ5IEJ1cmRldHRlIExhbWFyLgoqIEZpeHR1cmVzLyBhcmUgbm90IGJlaW5nIHRlc3RlZC4uLiBQdWxsIHJlcXVlc3QgIzQxNiBieSBNYXJjLUFuZHLDqQogIExhZm9ydHVuZS4KKiBVc2UgZnJvemVuIHN0cmluZyBmb3IgaGFzaCBrZXkuIFB1bGwgcmVxdWVzdCAjNDIwIGJ5IE1hcmMtQW5kcsOpCiAgTGFmb3J0dW5lLgoqIEFkZGVkIDpjYWxsLXNlcTogdG8gUkRvYyBmb3Igc29tZSBtZXRob2RzLiBQdWxsIHJlcXVlc3QgIzQyMiBieSBCdXJkZXR0ZQogIExhbWFyLgoqIFNtYWxsIHR5cG8gZml4LiBQdWxsIHJlcXVlc3QgIzQyMyBieSBNYXJjLUFuZHLDqSBMYWZvcnR1bmUuCgojIyAyMDE5LTEyLTExICgyLjMuMCkKICogRml4IGRlZmF1bHQgb2YgYGNyZWF0ZV9hZGRpdGlvbnNgIHRvIGFsd2F5cyBiZSBgZmFsc2VgIGZvciBgSlNPTih1c2VyX2lucHV0KWAKICAgYW5kIGBKU09OLnBhcnNlKHVzZXJfaW5wdXQsIG5pbClgLgogICBOb3RlIHRoYXQgYEpTT04ubG9hZGAgcmVtYWlucyB3aXRoIGRlZmF1bHQgYHRydWVgIGFuZCBpcyBtZWFudCBmb3IgaW50ZXJuYWwKICAgc2VyaWFsaXphdGlvbiBvZiB0cnVzdGVkIGRhdGEuIFtDVkUtMjAyMC0xMDY2M10KICogRml4IHBhc3NpbmcgYXJncyBhbGwgI3RvX2pzb24gaW4ganNvbi9hZGQvKi4KICogRml4IGVuY29kaW5nIGlzc3VlcwogKiBGaXggaXNzdWVzIG9mIGtleXdvcmQgdnMgcG9zaXRpb25hbCBwYXJhbWV0ZXIKICogRml4IEpTT046OlBhcnNlciBhZ2FpbnN0IGJpZ2RlY2ltYWwgdXBkYXRlcwogKiBCdWcgZml4ZXMgdG8gSlJ1YnkgcG9ydAoKIyMgMjAxOS0wMi0yMSAoMi4yLjApCiAqIEFkZHMgc3VwcG9ydCBmb3IgMi42IEJpZ0RlY2ltYWwgYW5kIHJ1Ynkgc3RhbmRhcmQgbGlicmFyeSBTZXQgZGF0ZXR5cGUuCgojIyAyMDE3LTA0LTE4ICgyLjEuMCkKICogQWxsb3cgcGFzc2luZyBvZiBgZGVjaW1hbF9jbGFzc2Agb3B0aW9uIHRvIHNwZWNpZnkgYSBjbGFzcyBhcyB3aGljaCB0byBwYXJzZQogICBKU09OIGZsb2F0IG51bWJlcnMuCiMjIDIwMTctMDMtMjMgKDIuMC40KQogKiBSYWlzZSBleGNlcHRpb24gZm9yIGluY29tcGxldGUgdW5pY29kZSBzdXJyb2dhdGVzL2NoYXJhY3RlciBlc2NhcGUKICAgc2VxdWVuY2VzLiBUaGlzIHByb2JsZW0gd2FzIHJlcG9ydGVkIGJ5IERhbmllbCBHb2xsYWhvbiAoZGdvbGxhaG9uKS4KICogRml4IGFyYml0cmFyeSBoZWFwIGV4cG9zdXJlIHByb2JsZW0uIFRoaXMgcHJvYmxlbSB3YXMgcmVwb3J0ZWQgYnkgQWhtYWQKICAgU2hlcmlmIChhaG1hZHNoZXJpZikuCgojIyAyMDE3LTAxLTEyICgyLjAuMykKICogU2V0IGByZXF1aXJlZF9ydWJ5X3ZlcnNpb25gIHRvIDEuOQogKiBTb21lIHNtYWxsIGZpeGVzCgojIyAyMDE2LTA3LTI2ICgyLjAuMikKICAqIFNwZWNpZnkgYHJlcXVpcmVkX3J1YnlfdmVyc2lvbmAgZm9yIGpzb25cX3B1cmUuCiAgKiBGaXggaXNzdWUgIzI5NSBmYWlsdXJlIHdoZW4gcGFyc2luZyBmcm96ZW4gc3RyaW5ncy4KCiMjIDIwMTYtMDctMDEgKDIuMC4xKQogICogRml4IHByb2JsZW0gd2hlbiByZXF1aXJpbmcganNvblxfcHVyZSBhbmQgUGFyc2VyIGNvbnN0YW50IHdhcyBkZWZpbmVkIHRvcAogICAgbGV2ZWwuCiAgKiBBZGQgYFJCX0dDX0dVQVJEYCB0byBhdm9pZCBwb3NzaWJsZSBHQyBwcm9ibGVtIHZpYSBQZXRlIEpvaG5zLgogICogU3RvcmUgYGN1cnJlbnRfbmVzdGluZ2Agb24gc3RhY2sgYnkgQWFyb24gUGF0dGVyc29uLgoKIyMgMjAxNS0wOS0xMSAoMi4wLjApCiAgKiBOb3cgY29tcGxpZXMgdG8gbmV3ZXN0IEpTT04gUkZDIDcxNTkuCiAgKiBJbXBsZW1lbnRzIGNvbXBhdGliaWxpdHkgdG8gcnVieSAyLjQgaW50ZWdlciB1bmlmaWNhdGlvbi4KICAqIERyb3BzIHN1cHBvcnQgZm9yIG9sZCBydWJpZXMgd2hvc2UgbGlmZSBoYXMgZW5kZWQsIHRoYXQgaXMgcnViaWVzIDwgMi4wLgogICAgQWxzbyBzZWUgaHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy9lbi9uZXdzLzIwMTQvMDcvMDEvZW9sLWZvci0xLTgtNy1hbmQtMS05LTIvCiAgKiBUaGVyZSB3ZXJlIHN0aWxsIHNvbWUgbWVudGlvbnMgb2YgZHVhbCBHUEwgbGljZW5zaW5nIGluIHRoZSBzb3VyY2UsIGJ1dCBKU09OCiAgICBoYXMganVzdCB0aGUgUnVieSBsaWNlbnNlIHRoYXQgaXRzZWxmIGluY2x1ZGVzIGFuIGV4cGxpY2l0IGR1YWwtbGljZW5zaW5nCiAgICBjbGF1c2UgdGhhdCBhbGxvd3MgY292ZXJlZCBzb2Z0d2FyZSB0byBiZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YKICAgIHRoZSBTaW1wbGlmaWVkIEJTRCBMaWNlbnNlIGluc3RlYWQgZm9yIGFsbCBydWJ5IHZlcnNpb25zID49IDEuOS4zLiBUaGlzIGlzCiAgICBob3dldmVyIGEgR1BMIGNvbXBhdGlibGUgbGljZW5zZSBhY2NvcmRpbmcgdG8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbi4KICAgIEkgY2hhbmdlZCB0aGVzZSBtZW50aW9ucyB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIFJ1YnkgbGljZW5zZSBzZXR0aW5nIGluCiAgICB0aGUgZ2Vtc3BlYyBmaWxlcyB3aGljaCB3ZXJlIGFscmVhZHkgY29ycmVjdCBub3cuCgojIyAyMDE3LTAxLTEzICgxLjguNikKICAqIEJlIGNvbXBhdGlibGUgd2l0aCBhbmNpZW50IHJ1YnkgMS44IChtYXliZT8pCgojIyAyMDE1LTA5LTExICgxLjguNSkKICAqIEJlIGNvbXBhdGlibGUgd2l0aCBydWJ5IDIuNC4wCiAgKiBUaGVyZSB3ZXJlIHN0aWxsIHNvbWUgbWVudGlvbnMgb2YgZHVhbCBHUEwgbGljZW5zaW5nIGluIHRoZSBzb3VyY2UsIGJ1dCBKU09OCiAgICBoYXMganVzdCB0aGUgUnVieSBsaWNlbnNlIHRoYXQgaXRzZWxmIGluY2x1ZGVzIGFuIGV4cGxpY2l0IGR1YWwtbGljZW5zaW5nCiAgICBjbGF1c2UgdGhhdCBhbGxvd3MgY292ZXJlZCBzb2Z0d2FyZSB0byBiZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YKICAgIHRoZSBTaW1wbGlmaWVkIEJTRCBMaWNlbnNlIGluc3RlYWQgZm9yIGFsbCBydWJ5IHZlcnNpb25zID49IDEuOS4zLiBUaGlzIGlzCiAgICBob3dldmVyIGEgR1BMIGNvbXBhdGlibGUgbGljZW5zZSBhY2NvcmRpbmcgdG8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbi4KICAgIEkgY2hhbmdlZCB0aGVzZSBtZW50aW9ucyB0byBiZSBjb25zaXN0ZW50IHdpdGggdGhlIFJ1YnkgbGljZW5zZSBzZXR0aW5nIGluCiAgICB0aGUgZ2Vtc3BlYyBmaWxlcyB3aGljaCB3ZXJlIGFscmVhZHkgY29ycmVjdCBub3cuCgojIyAyMDE1LTA2LTAxICgxLjguMykKICAqIEZpeCBwb3RlbnRpYWwgbWVtb3J5IGxlYWssIHRoeCB0byBub2J1LgoKIyMgMjAxNS0wMS0wOCAoMS44LjIpCiAgKiBTb21lIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBieSBWaXB1bCBBIE0gPHZpcHVsbnN3YXJkQGdtYWlsLmNvbT4uCiAgKiBGaXggYnkgSmFzb24gUi4gQ2xhcmsgPGpjbGFya0BuZXdyZWxpYy5jb20+IHRvIGF2b2lkIG11dGF0aW9uIG9mCiAgICBgSlNPTi5kdW1wX2RlZmF1bHRfb3B0aW9uc2AuCiAgKiBNb3JlIHRlc3RzIGJ5IE1pY2hhZWwgTWFjLVZpY2FyIDxtbWFjdmljYXJAZ21haWwuY29tPiBhbmQgZml4aW5nCiAgICBgc3BhY2VfYmVmb3JlYCBhY2Nlc3NvciBpbiBnZW5lcmF0b3IuCiAgKiBQZXJmb3JtYW5jZSBvbiBKcnVieSBpbXByb3ZlZCBieSBCZW4gQnJvd25pbmcgPGJicm93bmluQHJlZGhhdC5jb20+LgogICogU29tZSBmaXhlcyB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIG5ldyBSdWJ5IDIuMiBieSBaYWNoYXJ5IFNjb3R0IDxlQHp6YWsuaW8+CiAgICBhbmQgU0hJQkFUQSBIaXJvc2hpIDxoc2J0QHJ1YnktbGFuZy5vcmc+LgoKIyMgMjAxMy0wNS0xMyAoMS44LjEpCiAgKiBSZW1vdmUgUnViaW5pdXMgZXhjZXB0aW9uIHNpbmNlIHRyYW5zY29kaW5nIHNob3VsZCBiZSB3b3JraW5nIG5vdy4KCiMjIDIwMTMtMDUtMTMgKDEuOC4wKQogICogRml4IGh0dHBzOi8vZ2l0aHViLmNvbS9ydWJ5L2pzb24vaXNzdWVzLzE2MiByZXBvcnRlZCBieSBNYXJjLUFuZHJlCiAgICBMYWZvcnR1bmUgPGdpdGh1Yl9yb2Nrc0BtYXJjLWFuZHJlLmNhPi4gVGhhbmtzIQogICogQXBwbGllZCBwYXRjaGVzIGJ5IFl1aSBOQVJVU0UgPG5hcnVzZUBhaXJlbWl4LmpwPiB0byBzdXBwcmVzcyB3YXJuaW5nIHdpdGgKICAgIC1XY2hhci1zdWJzY3JpcHRzIGFuZCBiZXR0ZXIgdmFsaWRhdGUgVVRGLTggc3RyaW5ncy4KICAqIEFwcGxpZWQgcGF0Y2ggYnkgZ2lucmlraUBnaXRodWIgdG8gcmVtb3ZlIHVubmVjZXNzYXJ5IGlmLgogICogQWRkIGxvYWQvZHVtcCBpbnRlcmZhY2UgdG8gYEpTT046OkdlbmVyaWNPYmplY3RgIHRvIG1ha2UKICAgICAgICBzZXJpYWxpemUgOnNvbWVfYXR0cmlidXRlLCBgSlNPTjo6R2VuZXJpY09iamVjdGAKICAgIHdvcmsgaW4gUmFpbHMgYWN0aXZlIG1vZGVscyBmb3IgY29udmVuaWVudCBgU29tZU1vZGVsI3NvbWVfYXR0cmlidXRlLmZvby5iYXJgCiAgICBhY2Nlc3MgdG8gc2VyaWFsaXNlZCBKU09OIGRhdGEuCgojIyAyMDEzLTAyLTA0ICgxLjcuNykKICAqIFNlY3VyaXR5IGZpeCBmb3IgSlNPTiBjcmVhdGVfYWRkaXRpb25zIGRlZmF1bHQgdmFsdWUgYW5kCiAgICBgSlNPTjo6R2VuZXJpY09iamVjdGAuIEl0IHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gY3JlYXRlIGFkZGl0aW9ucyB1bmxlc3MKICAgIGV4cGxpY2l0bHkgcmVxdWVzdGVkIGJ5IHNldHRpbmcgdGhlIGNyZWF0ZV9hZGRpdGlvbnMgYXJndW1lbnQgdG8gdHJ1ZSBvcgogICAgdXNpbmcgdGhlIEpTT04ubG9hZC9kdW1wIGludGVyZmFjZS4gSWYgYEpTT046OkdlbmVyaWNPYmplY3RgIGlzIHN1cHBvc2VkIHRvCiAgICBiZSBhdXRvbWF0aWNhbGx5IGRlc2VyaWFsaXNlZCwgdGhpcyBoYXMgdG8gYmUgZXhwbGljaXRseSBlbmFibGVkIGJ5CiAgICBzZXR0aW5nCiAgICAgICAgSlNPTjo6R2VuZXJpY09iamVjdC5qc29uX2NyZWF0YWJsZSA9IHRydWUKICAgIGFzIHdlbGwuCiAgKiBSZW1vdmUgdXNlbGVzcyBhc3NlcnQgaW4gZmJ1ZmZlciBpbXBsZW1lbnRhdGlvbi4KICAqIEFwcGx5IHBhdGNoIGF0dGFjaGVkIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9ydWJ5L2pzb24vaXNzdWVzI2lzc3VlLzE1NQogICAgcHJvdmlkZWQgYnkgSm9obiBTaGFoaWQgPGp2c2hhaGlkQGdtYWlsLmNvbT4sIFRoeCEKICAqIEFkZCBsaWNlbnNlIGluZm9ybWF0aW9uIHRvIHJ1YnlnZW1zIHNwZWMgZGF0YSwgcmVwb3J0ZWQgYnkgSm9yZGkgTWFzc2FndWVyIFBsYSA8am1hc3NhZ3VlcnBsYUBzdXNlLmRlPi4KICAqIEltcHJvdmUgZG9jdW1lbnRhdGlvbiwgdGh4IHRvIFphY2hhcnkgU2NvdHQgPHphY2hhcnlAemFjaGFyeXNjb3R0Lm5ldD4uCgojIyAyMDEyLTExLTI5ICgxLjcuNikKICAqIEFkZCBgR2VuZXJhdG9yU3RhdGUjbWVyZ2VgIGFsaWFzIGZvciBKUnVieSwgZml4IHN0YXRlIGFjY2Vzc29yIG1ldGhvZHMuIFRoeCB0bwogICBqdnNoYWhpZEBnaXRodWIuCiAgKiBJbmNyZWFzZSBoYXNoIGxpa2VuZXNzIG9mIHN0YXRlIG9iamVjdHMuCgojIyAyMDEyLTA4LTE3ICgxLjcuNSkKICAqIEZpeCBjb21waWxhdGlvbiBvZiBleHRlbnNpb24gb24gb2xkZXIgcnViaWVzLgoKIyMgMjAxMi0wNy0yNiAoMS43LjQpCiAgKiBGaXggY29tcGlsYXRpb24gcHJvYmxlbSBvbiBBSVgsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3Vlcy8xNDIKCiMjIDIwMTItMDUtMTIgKDEuNy4zKQogICogV29yayBhcm91bmQgUnViaW5pdXMgZW5jb2RpbmcgaXNzdWVzIHVzaW5nIGljb252IGZvciBjb252ZXJzaW9uIGluc3RlYWQuCgojIyAyMDEyLTA1LTExICgxLjcuMikKICAqIEZpeCBzb21lIGVuY29kaW5nIGlzc3VlcywgdGhhdCBjYXVzZSBwcm9ibGVtcyBmb3IgIHRoZSBwdXJlIGFuZCB0aGUKICAgIGV4dGVuc2lvbiB2YXJpYW50IGluIGpydWJ5IDEuOSBtb2RlLgoKIyMgMjAxMi0wNC0yOCAoMS43LjEpCiAgKiBTb21lIHNtYWxsIGZpeGVzIGZvciBidWlsZGluZwoKIyMgMjAxMi0wNC0yOCAoMS43LjApCiAgKiBBZGQgYEpTT046OkdlbmVyaWNPYmplY3RgIGZvciBtZXRob2QgYWNjZXNzIHRvIG9iamVjdHMgdHJhbnNtaXR0ZWQgdmlhIEpTT04uCgojIyAyMDEyLTA0LTI3ICgxLjYuNykKICAqIEZpeCBwb3NzaWJsZSBjcmFzaCB3aGVuIHRyeWluZyB0byBwYXJzZSBuaWwgdmFsdWUuCgojIyAyMDEyLTAyLTExICgxLjYuNikKICAqIFByb3BhZ2F0ZSBzcmMgZW5jb2RpbmcgdG8gdmFsdWVzIG1hZGUgZnJvbSBpdCAoZml4ZXMgMS45IG1vZGUgY29udmVydGluZwogICAgZXZlcnl0aGluZyB0byBhc2NpaS04Yml0OyBoYXJtbGVzcyBmb3IgMS44IG1vZGUgdG9vKSAoVGhvbWFzIEUuIEVuZWJvCiAgICA8dG9tLmVuZWJvQGdtYWlsLmNvbT4pLCBzaG91bGQgZml4CiAgICBodHRwczovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3VlcyNpc3N1ZS8xMTkuCiAgKiBGaXggaHR0cHM6Ly9naXRodWIuY29tL3J1YnkvanNvbi9pc3N1ZXMjaXNzdWUvMTI0IFRoeCB0byBKYXNvbiBIdXRjaGVucy4KICAqIEZpeCBodHRwczovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3VlcyNpc3N1ZS8xMTcKCiMjIDIwMTItMDEtMTUgKDEuNi41KQogICogVml0IE9uZHJ1Y2ggPHYub25kcnVjaEB0aXNjYWxpLmN6PiByZXBvcnRlZCBhIGJ1ZyB0aGF0IHNob3dzIHVwIHdoZW4gdXNpbmcKICAgIG9wdGltaXNhdGlvbiB1bmRlciBHQ0MgNC43LiBUaHggdG8gaGltLCBCb2h1c2xhdiBLYWJyZGEKICAgIDxia2FicmRhQHJlZGhhdC5jb20+IGFuZCBZdWkgTkFSVVNFIDxuYXJ1c2VAYWlyZW1peC5qcD4gZm9yIGRlYnVnZ2luZyBhbmQKICAgIGRldmVsb3BpbmcgYSBwYXRjaCBmaXguCgojIyAyMDExLTEyLTI0ICgxLjYuNCkKICAqIFBhdGNoZXMgdGhhdCBpbXByb3ZlIHNwZWVkIG9uIEpSdWJ5IGNvbnRyaWJ1dGVkIGJ5IENoYXJsZXMgT2xpdmVyIE51dHRlcgogICAgPGhlYWRpdXNAaGVhZGl1cy5jb20+LgogICogU3VwcG9ydCBgb2JqZWN0X2NsYXNzYC9gYXJyYXlfY2xhc3NgIHdpdGggZHVjayB0eXBlZCBoYXNoL2FycmF5LgoKIyMgMjAxMS0xMi0wMSAoMS42LjMpCiAgKiBMZXQgYEpTT04ubG9hZCgnJylgIHJldHVybiBuaWwgYXMgd2VsbCB0byBtYWtlIG15c3FsIHRleHQgY29sdW1ucyAoZGVmYXVsdCB0bwogICAgYCcnYCkgd29yayBiZXR0ZXIgZm9yIHNlcmlhbGl6YXRpb24uCgojIyAyMDExLTExLTIxICgxLjYuMikKICAqIEFkZCBzdXBwb3J0IGZvciBPcGVuU3RydWN0IGFuZCBCaWdEZWNpbWFsLgogICogRml4IGJ1ZyB3aGVuIHBhcnNpbmcgbmlsIGluIGBxdWlya3NfbW9kZWAuCiAgKiBNYWtlIEpTT04uZHVtcCBhbmQgSlNPTi5sb2FkIG1ldGhvZHMgYmV0dGVyIGNvb3BlcmF0ZSB3aXRoIFJhaWxzJyBzZXJpYWxpemUKICAgIG1ldGhvZC4gSnVzdCB1c2U6CiAgICAgICAgc2VyaWFsaXplIDp2YWx1ZSwgSlNPTgogICogRml4IGJ1ZyB3aXRoIHRpbWUgc2VyaWFsaXphdGlvbiBjb25jZXJuaW5nIG5hbm9zZWNvbmRzLiBUaGFua3MgZm9yIHRoZQogICAgcGF0Y2ggZ28gdG8gSm9zaCBQYXJ0bG93IChqcGFydGxvd0BnaXRodWIpLgogICogSW1wcm92ZSBwYXJzaW5nIHNwZWVkIGZvciBKU09OIG51bWJlcnMgKGludGVnZXJzIGFuZCBmbG9hdHMpIGluIGEgc2ltaWxhciB3YXkgdG8KICAgIHdoYXQgRXZhbiBQaG9lbml4IDxldmFuQHBoeC5pbz4gc3VnZ2VzdGVkIGluOgogICAgaHR0cHM6Ly9naXRodWIuY29tL3J1YnkvanNvbi9wdWxsLzEwMwoKIyMgMjAxMS0wOS0xOCAoMS42LjEpCiAgKiBVc2luZyAtdGFyZ2V0IDEuNSB0byBmb3JjZSBKYXZhIGJpdHMgdG8gY29tcGlsZSB3aXRoIDEuNS4KCiMjIDIwMTEtMDktMTIgKDEuNi4wKQogICogRXh0cmFjdCB1dGlsaXRpZXMgKHByZXR0aWZpZXIgYW5kIEdVSS1lZGl0b3IpIGluIGl0cyBvd24gZ2VtIGpzb24tdXRpbHMuCiAgKiBTcGxpdCBqc29uL2FkZC9jb3JlIGludG8gZGlmZmVyZW50IGZpbGVzIGZvciBjbGFzc2VzIHRvIGJlIHNlcmlhbGlzZWQuCgojIyAyMDExLTA4LTMxICgxLjUuNCkKICAqIEZpeCBtZW1vcnkgbGVhayB3aGVuIHVzZWQgZnJvbSBtdWx0aXBsZSBKUnVieS4gKFBhdGNoIGJ5CiAgICBqZmlyZWJhdWdoQGdpdGh1YikuCiAgKiBBcHBseSBwYXRjaCBieSBFcmljIFdvbmcgPG5vY29kZUB5aGJ0Lm5ldD4gdGhhdCBmaXhlcyBnYXJiYWdlIGNvbGxlY3Rpb24gcHJvYmxlbQogICAgcmVwb3J0ZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3J1YnkvanNvbi9pc3N1ZXMvNDYuCiAgKiBBZGQgOnF1aXJrc19tb2RlIG9wdGlvbiB0byBwYXJzZXIgYW5kIGdlbmVyYXRvci4KICAqIEFkZCBzdXBwb3J0IGZvciBSYXRpb25hbCBhbmQgQ29tcGxleCBudW1iZXIgYWRkaXRpb25zIHZpYSBqc29uL2FkZC9jb21wbGV4CiAgICBhbmQganNvbi9hZGQvcmF0aW9uYWwgcmVxdWlyZXMuCgojIyAyMDExLTA2LTIwICgxLjUuMykKICAqIEFsaWFzIFN0YXRlI2NvbmZpZ3VyZSBtZXRob2QgYXMgU3RhdGUjbWVyZ2UgdG8gaW5jcmVhc2UgZHVjayB0eXBlIHN5bm9ueW15IHdpdGggSGFzaC4KICAqIEFkZCBgYXNfanNvbmAgbWV0aG9kcyBpbiBqc29uL2FkZC9jb3JlLCBzbyByYWlscyBjYW4gY3JlYXRlIGl0cyBqc29uIG9iamVjdHMgdGhlIG5ldyB3YXkuCgojIyAyMDExLTA1LTExICgxLjUuMikKICAqIEFwcGx5IGRvY3VtZW50YXRpb24gcGF0Y2ggYnkgQ29yeSBNb250eSA8Y29yeS5tb250eUBnbWFpbC5jb20+LgogICogQWRkIGdlbXNwZWNzIGZvciBqc29uIGFuZCBqc29uXF9wdXJlLgogICogRml4IGJ1ZyBpbiBqcnVieSBwcmV0dHkgcHJpbnRpbmcuCiAgKiBGaXggYnVnIGluIGBvYmplY3RfY2xhc3NgIGFuZCBgYXJyYXlfY2xhc3NgIHdoZW4gaW5oZXJpdGluZyBmcm9tIEhhc2ggb3IKICAgIEFycmF5LgoKIyMgMjAxMS0wMS0yNCAoMS41LjEpCiAgKiBNYWRlIHJha2UtY29tcGlsZXIgYnVpbGQgYSBmYXQgYmluYXJ5IGdlbS4gVGhpcyBzaG91bGQgZml4IGlzc3VlCiAgICBodHRwczovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3VlcyNpc3N1ZS81NC4KCiMjIDIwMTEtMDEtMjIgKDEuNS4wKQogICogSW5jbHVkZWQgSmF2YSBzb3VyY2UgY29kZXMgZm9yIHRoZSBKcnVieSBleHRlbnNpb24gbWFkZSBieSBEYW5pZWwgTHV6CiAgICA8ZGV2QG1lcm5lbi5jb20+LgogICogT3V0cHV0IGZ1bGwgZXhjZXB0aW9uIG1lc3NhZ2Ugb2YgYGRlZXBfY29uc3RfZ2V0YCB0byBhaWQgZGVidWdnaW5nLgogICogRml4ZWQgYW4gaXNzdWUgd2l0aCBydWJ5IDEuOSBgTW9kdWxlI2NvbnN0X2RlZmluZWQ/YCBtZXRob2QsIHRoYXQgd2FzCiAgICByZXBvcnRlZCBieSBSaWxleSBHb29kc2lkZS4KCiMjIDIwMTAtMDgtMDkgKDEuNC42KQogICogRml4ZWQgb3ZlcnNpZ2h0IHJlcG9ydGVkIGluIGh0dHA6Ly9naXRodWIuY29tL3J1YnkvanNvbi9pc3N1ZXMvY2xvc2VkI2lzc3VlLzIzLAogICAgYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgZnJvbSB0aGUgc3RhdGUgcHJvdG90eXBlLgogICogTWFkZSBwdXJlIGFuZCBleHQgYXBpIG1vcmUgc2ltaWxhciBhZ2Fpbi4KCiMjIDIwMTAtMDgtMDcgKDEuNC41KQogICogTWFuYWdlIGRhdGEgc3RydWN0dXJlIG5lc3RpbmcgZGVwdGggaW4gc3RhdGUgb2JqZWN0IGR1cmluZyBnZW5lcmF0aW9uLiBUaGlzCiAgICBzaG91bGQgcmVkdWNlIHByb2JsZW1zIHdpdGggYHRvX2pzb25gIG1ldGhvZCBkZWZpbtGWdGlvbnMgdGhhdCBvbmx5IGhhdmUgb25lCiAgICBhcmd1bWVudC4KICAqIFNvbWUgZml4ZXMgaW4gdGhlIHN0YXRlIG9iamVjdHMgYW5kIGFkZGl0aW9uYWwgdGVzdHMuCiMjIDIwMTAtMDgtMDYgKDEuNC40KQogICogRml4ZXMgYnVpbGQgcHJvYmxlbSBmb3IgcnViaW5pdXMgdW5kZXIgT1MgWCwgaHR0cDovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3Vlcy9jbG9zZWQjaXNzdWUvMjUKICAqIEZpeGVzIGNyYXNoZXMgZGVzY3JpYmVkIGluIGh0dHA6Ly9naXRodWIuY29tL3J1YnkvanNvbi9pc3N1ZXMvY2xvc2VkI2lzc3VlLzIxIGFuZAogICAgaHR0cDovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3Vlcy9jbG9zZWQjaXNzdWUvMjMKIyMgMjAxMC0wNS0wNSAoMS40LjMpCiAgKiBGaXhlZCBzb21lIHRlc3QgYXNzZXJ0aW9ucywgZnJvbSBSdWJ5IHIyNzU4NyBhbmQgcjI3NTkwLCBwYXRjaCBieSBub2J1LgogICogRml4ZWQgaXNzdWUgaHR0cDovL2dpdGh1Yi5jb20vcnVieS9qc29uL2lzc3Vlcy8jaXNzdWUvMjAgcmVwb3J0ZWQgYnkKICAgIGVsZWN0cm9uaWN3aGlzcGVyQGdpdGh1Yi4gVGh4IQoKIyMgMjAxMC0wNC0yNiAoMS40LjIpCiAgKiBBcHBsaWVkIHBhdGNoIGZyb20gbmFydXNlIFl1aSBOQVJVU0UgPG5hcnVzZUBhaXJlbWl4LmNvbT4gdG8gbWFrZSBidWlsZGluZyB3aXRoCiAgICBNaWNyb3NvZnQgVmlzdWFsIEMgcG9zc2libGUgYWdhaW4uCiAgKiBBcHBsaWVkIHBhdGNoIGZyb20gZGV2cmFuZG9tIDxjMS5naXRodWJAbmlmdHlib3gubmV0PiBpbiBvcmRlciB0byBhbGxvdyBidWlsZGluZyBvZgogICAganNvbl9wdXJlIGlmIGV4dGVuc2lvbnRhc2sgaXMgbm90IHByZXNlbnQuCiAgKiBUaGFua3MgdG8gRHVzdGluIFNjaG5laWRlciA8ZHVzdGluQHN0b2NrdHdpdHMuY29tPiwgd2hvIHJlcG9ydGVkIGEgbWVtb3J5CiAgICBsZWFrLCB3aGljaCBpcyBmaXhlZCBpbiB0aGlzIHJlbGVhc2UuCiAgKiBBcHBsaWVkIDk5M2YyNjFjY2I4ZjkxMWQyYWU1N2U5ZGI0OGVjN2FjZDAxODcyODMgcGF0Y2ggZnJvbSBqb3NoQGdpdGh1Yi4KCiMjIDIwMTAtMDQtMjUgKDEuNC4xKQogICogRml4IGZvciBhIGJ1ZyByZXBvcnRlZCBieSBEYW4gRGVMZW8gPGRhbkBrYWxsaXN0ZWMuY29tPiwgY2F1c2VkIGJ5IFRfRklYTlVNCiAgICBiZWluZyBkaWZmZXJlbnQgb24gMzJiaXQvNjRiaXQgYXJjaGl0ZWN0dXJlcy4KCiMjIDIwMTAtMDQtMjMgKDEuNC4wKQogICogTWFqb3Igc3BlZWQgaW1wcm92ZW1lbnRzIGFuZCBidWlsZGluZyB3aXRoIHNpbXBsaWZpZWQKICAgIGRpcmVjdG9yeS9maWxlLXN0cnVjdHVyZS4KICAqIEV4dGVuc2lvbiBzaG91bGQgYXQgbGVhc3QgYmUgY29tcGF0aWJsZSB3aXRoIE1SSSwgWUFSViBhbmQgUnViaW5pdXMuCgojIyAyMDEwLTA0LTA3ICgxLjIuNCkKICAqIFRyaWdnZXIgY29uc3RfbWlzc2luZyBjYWxsYmFjayB0byBtYWtlIFJhaWxzJyBkeW5hbWljIGNsYXNzIGxvYWRpbmcgd29yay4KCiMjIDIwMTAtMDMtMTEgKDEuMi4zKQogICogQWRkZWQgYSBgU3RhdGUjW11gIG1ldGhvZCB3aGljaCByZXR1cm5zIGFuIGF0dHJpYnV0ZSdzIHZhbHVlIGluIG9yZGVyIHRvCiAgICBpbmNyZWFzZSBkdWNrIHR5cGUgY29tcGF0aWJpbGl0eSB0byBIYXNoLgoKIyMgMjAxMC0wMi0yNyAoMS4yLjIpCiAgKiBNYWRlIHNvbWUgY2hhbmdlcyB0byBtYWtlIHRoZSBidWlsZGluZyBvZiB0aGUgcGFyc2VyL2dlbmVyYXRvciBjb21wYXRpYmxlCiAgICB0byBSdWJpbml1cy4KCiMjIDIwMDktMTEtMjUgKDEuMi4xKQogICogQWRkZWQgYDpzeW1ib2xpemVfbmFtZXNgIG9wdGlvbiB0byBQYXJzZXIsIHdoaWNoIHJldHVybnMgc3ltYm9scyBpbnN0ZWFkIG9mCiAgICBzdHJpbmdzIGluIG9iamVjdCBuYW1lcy9rZXlzLgoKIyMgMjAwOS0xMC0wMSAoMS4yLjApCiAgKiBgZmFzdF9nZW5lcmF0ZWAgbm93IHJhaXNlcyBhbiBleGNlcHRpb24gZm9yIG5hbiBhbmQgaW5maW5pdGUgZmxvYXRzLgogICogT24gUnVieSAxLjgganNvbiBzdXBwb3J0cyBwYXJzaW5nIG9mIFVURi04LCBVVEYtMTZCRSwgVVRGLTE2TEUsIFVURi0zMkJFLAogICAgYW5kIFVURi0zMkxFIEpTT04gZG9jdW1lbnRzIG5vdy4gVW5kZXIgUnVieSAxLjkgdGhlIE0xN24gY29udmVyc2lvbgogICAgZnVuY3Rpb25zIGFyZSB1c2VkIHRvIGNvbnZlcnQgZnJvbSBhbGwgc3VwcG9ydGVkIGVuY29kaW5ncy4gQVNDSUktOEJJVAogICAgZW5jb2RlZCBzdHJpbmdzIGFyZSBoYW5kbGVkIGxpa2UgYWxsIHN0cmluZ3MgdW5kZXIgUnVieSAxLjggd2VyZS4KICAqIEJldHRlciBkb2N1bWVudGF0aW9uCgojIyAyMDA5LTA4LTIzICgxLjEuOSkKICAqIEFkZGVkIGZvcmdvdHRlbiBtYWluIGRvYyBmaWxlIGBleHRyYV9yZG9jX2ZpbGVzYC4KCiMjIDIwMDktMDgtMjMgKDEuMS44KQogICogQXBwbGllZCBhIHBhdGNoIGJ5IE9aQVdBIFNha3VybyA8c2FrdXJvQDIyMzhjbHViLm9yZz4gdG8gbWFrZSBqc29uL3B1cmUKICAgIHdvcmsgaW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3QgcHJvdmlkZSBpY29udi4KICAqIEFwcGxpZWQgcGF0Y2ggYnkgb2trZXpfIGluIG9yZGVyIHRvIGZpeCBSdWJ5IEJ1ZyAjMTc2ODoKICAgICAgaHR0cDovL3JlZG1pbmUucnVieS1sYW5nLm9yZy9pc3N1ZXMvc2hvdy8xNzY4LgogICogRmluYWxseSBnb3QgYXJvdW5kIHRvIGF2b2lkIHRoZSByYXRoZXIgcGFyYW5vaWQgZXNjYXBpbmcgb2YgPy8gY2hhcmFjdGVycwogICAgaW4gdGhlIGdlbmVyYXRvcidzIG91dHB1dC4gVGhlIHBhcnNlcnMgYXJlbid0IGFmZmVjdGVkIGJ5IHRoaXMgY2hhbmdlLgogICAgVGhhbmtzIHRvIFJpY2ggQXBvZGFjYSA8cmFwb2RhY2FAbWV0YW1vbGVjdWxhci5jb20+IGZvciB0aGUgc3VnZ2VzdGlvbi4KCiMjIDIwMDktMDYtMjkgKDEuMS43KQogICogU2VjdXJpdHkgRml4IGZvciBKU09OOjpQdXJlOjpQYXJzZXIuIEEgc3BlY2lhbGx5IGRlc2lnbmVkIHN0cmluZyBjb3VsZAogICAgY2F1c2UgY2F0YXN0cm9waGljIGJhY2t0cmFja2luZyBpbiBvbmUgb2YgdGhlIHBhcnNlcidzIHJlZ3VsYXIgZXhwcmVzc2lvbnMKICAgIGluIGVhcmxpZXIgMS4xLnggdmVyc2lvbnMuIEpTT046OkV4dDo6UGFyc2VyIGlzbid0IGFmZmVjdGVkIGJ5IHRoaXMgaXNzdWUuCiAgICBUaGFua3MgdG8gQmFydG9zeiBCbGlta2UgPGJhcnRvc3pAbmV3LWJhbWJvby5jby51az4gZm9yIHJlcG9ydGluZyB0aGlzCiAgICBwcm9ibGVtLgogICogVGhpcyByZWxlYXNlIGFsc28gdXNlcyBhIGxlc3Mgc3RyaWN0IHJ1YnkgdmVyc2lvbiByZXF1aXJlbWVudCBmb3IgdGhlCiAgICBjcmVhdGlvbiBvZiB0aGUgbXN3aW4zMiBuYXRpdmUgZ2VtLgoKIyMgMjAwOS0wNS0xMCAoMS4xLjYpCiAgKiBObyBjaGFuZ2VzLiDQhiB0ZXN0ZWQgbmF0aXZlIGxpbnV4IGdlbXMgaW4gdGhlIGxhc3QgcmVsZWFzZSBhbmQgdGhleSBkb24ndAogICAgcGxheSB3ZWxsIHdpdGggZGlmZmVyZW50IHJ1YnkgdmVyc2lvbnMgb3RoZXIgdGhhbiB0aGUgb25lIHRoZSBnZW0gd2FzIGJ1aWx0CiAgICB3aXRoLiBUaGlzIHJlbGVhc2UgaXMganVzdCB0byBidW1wIHRoZSB2ZXJzaW9uIG51bWJlciBpbiBvcmRlciB0byBza2lwIHRoZQogICAgbmF0aXZlIGdlbSBvbiBydWJ5Zm9yZ2UuCgojIyAyMDA5LTA1LTEwICgxLjEuNSkKICAqIFN0YXJ0ZWQgdG8gYnVpbGQgZ2VtcyB3aXRoIHJha2UtY29tcGlsZXIgZ2VtLgogICogQXBwbGllZCBwYXRjaCBvYmplY3QvYXJyYXkgY2xhc3MgcGF0Y2ggZnJvbSBCcmlhbiBDYW5kbGVyCiAgICA8Qi5DYW5kbGVyQHBvYm94LmNvbT4gYW5kIGZpeGVzLgoKIyMgMjAwOS0wNC0wMSAoMS4xLjQpCiAgKiBGaXhlZCBhIGJ1ZyBpbiB0aGUgY3JlYXRpb24gb2Ygc2VyaWFsaXplZCBnZW5lcmljIHJhaWxzIG9iamVjdHMgcmVwb3J0ZWQgYnkKICAgIEZyaWVkcmljaCBHcmFldGVyIDxncmFldGVyQGh5ZHJpeG9zLm9yZz4uCiAgKiBEZWxldGVkIHRlc3RzL3J1bm5lci5yYiwgd2UncmUgdXNpbmcgdGVzdHJiIGluc3RlYWQuCiAgKiBFZGl0b3Igc3VwcG9ydHMgSW5maW5pdHkgaW4gbnVtYmVycyBub3cuCiAgKiBNYWRlIHNvbWUgY2hhbmdlcyBpbiBvcmRlciB0byBnZXQgdGhlIGxpYnJhcnkgdG8gY29tcGlsZS9ydW4gdW5kZXIgUnVieQogICAgMS45LgogICogSW1wcm92ZWQgc3BlZWQgb2YgdGhlIGNvZGUgcGF0aCBmb3IgdGhlIGZhc3RfZ2VuZXJhdGUgbWV0aG9kIGluIHRoZSBwdXJlCiAgICB2YXJpYW50LgoKIyMgMjAwOC0wNy0xMCAoMS4xLjMpCiAgKiBXZXNsZXkgQmVhcnkgPG1vbmtpQGdlZW11cy5jb20+IHJlcG9ydGVkIGEgYnVnIGluIGpzb24vYWRkL2NvcmUncyBEYXRlVGltZQogICAgaGFuZGxpbmc6IElmIHRoZSBub21pbmF0b3IgYW5kIGRlbm9taW5hdG9yIG9mIHRoZSBvZmZzZXQgd2VyZSBkaXZpc2libGUgYnkKICAgIGVhY2ggb3RoZXIgUnVieSdzIFJhdGlvbmFsI3RvX3MgcmV0dXJucyB0aGVtIGFzIGFuIGludGVnZXIgbm90IGEgZnJhY3Rpb24KICAgIHdpdGggJy8nLiBUaGlzIGNhdXNlZCBhIFplcm9EaXZpc2lvbkVycm9yIGR1cmluZyBwYXJzaW5nLgogICogVXNlIERhdGUjc3RhcnQgYW5kIERhdGVUaW1lI3N0YXJ0IGluc3RlYWQgb2Ygc2cgbWV0aG9kLCB3aGlsZQogICAgcmVtYWluaW5nIGJhY2t3YXJkcyBjb21wYXRpYmxlLgogICogU3VwcG9ydHMgcmFnZWwgPj0gNi4wIG5vdy4KICAqIENvcnJlY3RlZCBzb21lIHRlc3RzLgogICogU29tZSBtaW5vciBjaGFuZ2VzLgoKIyMgMjAwNy0xMS0yNyAoMS4xLjIpCiAgKiBSZW1lbWJlciBkZWZhdWx0IGRpciAobGFzdCB1c2VkIGRpcmVjdG9yeSkgaW4gZWRpdG9yLgogICogSlNPTjo6RWRpdG9yLmVkaXQgbWV0aG9kIGFkZGVkLCB0aGUgZWRpdG9yIGNhbiBub3cgcmVjZWl2ZSBqc29uIHRleHRzIGZyb20KICAgIHRoZSBjbGlwYm9hcmQgdmlhIEMtdi4KICAqIExvYWQganNvbiB0ZXh0cyBmcm9tIGFuIFVSTCBwYXN0ZWQgdmlhIG1pZGRsZSBidXR0b24gcHJlc3MuCiAgKiBBZGRlZCA6Y3JlYXRlX2FkZGl0aW9ucyBvcHRpb24gdG8gUGFyc2VyLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRpc2FibGUKICAgIHRoZSBjcmVhdGlvbiBvZiBhZGRpdGlvbnMgYnkgZm9yY2UsIGluIG9yZGVyIHRvIHRyZWF0IGpzb24gdGV4dHMgYXMgZGF0YQogICAgd2hpbGUgaGF2aW5nIGFkZGl0aW9ucyBsb2FkZWQuCiAgKiBKYWNvYiBNYWluZSA8am1haW5lQGJsdXJiLmNvbT4gcmVwb3J0ZWQsIHRoYXQgSlNPTig6Zm9vKSBvdXRwdXRzIGEgSlNPTgogICAgb2JqZWN0IGlmIHRoZSByYWlscyBhZGRpdGlvbiBpcyBlbmFibGVkLCB3aGljaCBpcyB3cm9uZy4gSXQgbm93IG91dHB1dHMgYQogICAgSlNPTiBzdHJpbmcgImZvbyIgaW5zdGVhZCwgbGlrZSBzdWdnZXN0ZWQgYnkgSmFjb2IgTWFpbmUuCiAgKiBEaXNjb3ZlcmVkIGEgYnVnIGluIHRoZSBSdWJ5IEJ1Z3MgVHJhY2tlciBvbiBydWJ5Zm9yZ2UsIHRoYXQgd2FzIHJlcG9ydGVkCiAgICBieSBKb2huIEV2YW5zIGxnYXN0YWtvQGdtYWlsLmNvbS4gSGUgY291bGQgcHJvZHVjZSBhIGNyYXNoIGluIHRoZSBKU09OCiAgICBnZW5lcmF0b3IgYnkgcmV0dXJuaW5nIHNvbWV0aGluZyBvdGhlciB0aGFuIGEgU3RyaW5nIGluc3RhbmNlIGZyb20gYQogICAgdG9fanNvbiBtZXRob2QuIEkgbm93IGd1YXJkIGFnYWluc3QgdGhpcyBieSBkb2luZyBhIHJhdGhlciBjcnVkZSB0eXBlCiAgICBjaGVjaywgd2hpY2ggcmFpc2VzIGFuIGV4Y2VwdGlvbiBpbnN0ZWFkIG9mIGNyYXNoaW5nLgoKIyMgMjAwNy0wNy0wNiAoMS4xLjEpCiAgKiBZdWkgTkFSVVNFIDxuYXJ1c2VAYWlyZW1peC5jb20+IHNlbnQgc29tZSBwYXRjaGVzIHRvIGZpeCB0ZXN0cyBmb3IgUnVieQogICAgMS45LiBJIGFwcGxpZWQgdGhlbSBhbmQgYWRhcHRlZCBzb21lIG9mIHRoZW0gYSBiaXQgdG8gcnVuIGJvdGggb24gMS44IGFuZAogICAgMS45LgogICogSW50cm9kdWNlZCBhIGBKU09OLnBhcnNlIWAgbWV0aG9kIHdpdGhvdXQgZGVwdGggY2hlY2tpbmcgZm9yIHBlb3BsZSB3aG8KICAgIGxpa2UgZGFuZ2VyLgogICogTWFkZSBnZW5lcmF0ZSBhbmQgYHByZXR0eV9nZW5lcmF0ZWAgbWV0aG9kcyBjb25maWd1cmFibGUgYnkgYW4gb3B0aW9ucyBoYXNoLgogICogQWRkZWQgOmFsbG93X25hbiBvcHRpb24gdG8gcGFyc2VyIGFuZCBnZW5lcmF0b3IgaW4gb3JkZXIgdG8gaGFuZGxlIE5hTiwKICAgIEluZmluaXR5LCBhbmQgLUluZmluaXR5IGNvcnJlY3RseSAtIGlmIHJlcXVlc3RlZC4gRmxvYXRzLCB3aGljaCBhcmVuJ3QgbnVtYmVycywKICAgIGFyZW4ndCB2YWxpZCBKU09OIGFjY29yZGluZyB0byBSRkM0NjI3LCBzbyBieSBkZWZhdWx0IGFuIGV4Y2VwdGlvbiB3aWxsIGJlCiAgICByYWlzZWQgaWYgYW55IG9mIHRoZXNlIHN5bWJvbHMgYXJlIGVuY291bnRlcmVkLiBUaGFua3MgdG8gQW5kcmVhIENlbnNpCiAgICA8YW5kcmVhLmNlbnNpQGRpcy51bmlyb21hMS5pdD4gZm9yIGhpcyBoaW50IGFib3V0IHRoaXMuCiAgKiBGaXhlZCBzb21lIG1vcmUgdGVzdHMgZm9yIFJ1YnkgMS45LgogICogSW1wbGVtZW50ZWQgZHVtcC9sb2FkIGludGVyZmFjZSBvZiBNYXJzaGFsIGFzIHN1Z2dlc3RlZCBpbiBydWJ5LWNvcmU6MTE0MDUKICAgIGJ5IG11cnBoeSA8bXVycGh5QHJ1YnljaGFuLmRlPi4KICAqIEltcGxlbWVudGVkIHRoZSBgbWF4X25lc3RpbmdgIGZlYXR1cmUgZm9yIGdlbmVyYXRlIG1ldGhvZHMsIHRvby4KICAqIEFkZGVkIHNvbWUgaW1wbGVtZW50YXRpb25zIGZvciBydWJ5IGNvcmUncyBjdXN0b20gb2JqZWN0cyBmb3IKICAgIHNlcmlhbGlzYXRpb24vZGVzZXJpYWxpc2F0aW9uIHB1cnBvc2VzLgoKIyMgMjAwNy0wNS0yMSAoMS4xLjApCiAgKiBJbXBsZW1lbnRlZCBtYXhfbmVzdGluZyBmZWF0dXJlIGZvciBwYXJzZXIgdG8gYXZvaWQgc3RhY2sgb3ZlcmZsb3dzIGZvcgogICAgZGF0YSBmcm9tIHVudHJ1c3RlZCBzb3VyY2VzLiBJZiB5b3UgdHJ1c3QgdGhlIHNvdXJjZSwgeW91IGNhbiBkaXNhYmxlIGl0CiAgICB3aXRoIHRoZSBvcHRpb24gbWF4X25lc3RpbmcgPT4gZmFsc2UuCiAgKiBQaWVycyBDYXdsZXkgPHBkY2F3bGV5QGJvZmgub3JnLnVrPiByZXBvcnRlZCBhIGJ1ZywgdGhhdCBub3QgZXZlcnkKICAgIGNoYXJhY3RlciBjYW4gYmUgZXNjYXBlZCBieSBgXGAgYXMgcmVxdWlyZWQgYnkgUkZDNDYyNy4gVGhlcmUncyBhCiAgICBjb250cmFkaWN0aW9uIGJldHdlZW4gRGF2aWQgQ3JvY2tmb3JkJ3MgSlNPTiBjaGVja2VyIHRlc3QgdmVjdG9ycyAoaW4KICAgIHRlc3RzL2ZpeHR1cmVzKSBhbmQgUkZDNDYyNywgdGhvdWdoLiBJIGRlY2lkZWQgdG8gc3RpY2sgdG8gdGhlIFJGQywgYmVjYXVzZQogICAgdGhlIEpTT04gY2hlY2tlciBzZWVtcyB0byBiZSBhIGJpdCBvbGRlciB0aGFuIHRoZSBSRkMuCiAgKiBFeHRlbmRlZCBsaWNlbnNlIHRvIFJ1YnkgTGljZW5zZSwgd2hpY2ggaW5jbHVkZXMgdGhlIEdQTC4KICAqIEFkZGVkIGtleWJvYXJkIHNob3J0Y3V0cywgYW5kICdPcGVuIGxvY2F0aW9uJyBtZW51IGl0ZW0gdG8gZWRpdF9qc29uLnJiLgoKIyMgMjAwNy0wNS0wOSAoMS4wLjQpCiAgKiBBcHBsaWVkIGEgcGF0Y2ggZnJvbSBZdWkgTkFSVVNFIDxuYXJ1c2VAYWlyZW1peC5jb20+IHRvIG1ha2UgSlNPTiBjb21waWxlCiAgICB1bmRlciBSdWJ5IDEuOS4gVGhhbmsgeW91IHZlcnkgbXVjaCBmb3IgbWFpbGluZyBpdCB0byBtZSEKICAqIE1hZGUgYmluYXJ5IHZhcmlhbnRzIG9mIEpTT04gZmFpbCBlYXJseSwgaW5zdGVhZCBvZiBmYWxsaW5nIGJhY2sgdG8gdGhlCiAgICBwdXJlIHZlcnNpb24uIFRoaXMgc2hvdWxkIGF2b2lkIG92ZXJzaGFkb3dpbmcgb2YgZXZlbnR1YWwgcHJvYmxlbXMgd2hpbGUKICAgIGxvYWRpbmcgb2YgdGhlIGJpbmFyeS4KCiMjIDIwMDctMDMtMjQgKDEuMC4zKQogICogSW1wcm92ZWQgcGVyZm9ybWFuY2Ugb2YgcHVyZSB2YXJpYW50IGEgYml0LgogICogVGhlIGV4dCB2YXJpYW50IG9mIHRoaXMgcmVsZWFzZSBzdXBwb3J0cyB0aGUgbXN3aW4zMiBwbGF0Zm9ybS4gVWdoIQoKIyMgMjAwNy0wMy0yNCAoMS4wLjIpCiAgKiBFeHQgUGFyc2VyIGRpZG4ndCBwYXJzZSAwZTAgY29ycmVjdGx5IGludG8gMC4wOiBGaXhlZCEKCiMjIDIwMDctMDMtMjQgKDEuMC4xKQogICogRm9yZ290IHNvbWUgb2JqZWN0IGZpbGVzIGluIHRoZSBidWlsZCBkaXIuIEkgcmVhbGx5IGxpa2UgdGhhdCAtIG5vdCEKCiMjIDIwMDctMDMtMjQgKDEuMC4wKQogICogQWRkZWQgQyBpbXBsZW1lbnRhdGlvbnMgZm9yIHRoZSBKU09OIGdlbmVyYXRvciBhbmQgYSByYWdlbCBiYXNlZCBKU09OCiAgICBwYXJzZXIgaW4gQy4KICAqIE11Y2ggbW9yZSB0ZXN0cywgZXNwZWNpYWxseSBmaXh0dXJlcyBmcm9tIGpzb24ub3JnLgogICogRnVydGhlciBpbXByb3ZlZCBjb25mb3JtYW5jZSB0byBSRkM0NjI3LgoKIyMgMjAwNy0wMi0wOSAoMC40LjMpCiAgKiBDb25mb3JtIG1vcmUgdG8gUkZDNDYyNyBmb3IgSlNPTjogVGhpcyBtZWFucyBKU09OIHN0cmluZ3MKICAgIG5vdyBhbHdheXMgbXVzdCBjb250YWluIGV4YWN0bHkgb25lIG9iamVjdCBgInsgLi4uIH0iYCBvciBhcnJheSBgIlsgLi4uIF0iYCBpbgogICAgb3JkZXIgdG8gYmUgcGFyc2VkIHdpdGhvdXQgcmFpc2luZyBhbiBleGNlcHRpb24uIFRoZSBkZWZpbml0aW9uIG9mIHdoYXQKICAgIGNvbnN0aXR1dGVzIGEgd2hpdGVzcGFjZSBpcyBuYXJyb3dlciBpbiBKU09OIHRoYW4gaW4gUnVieSAoWyBcdFxyXG5dKSwgYW5kCiAgICB0aGVyZSBhcmUgZGlmZmVyZW5jZXMgaW4gZmxvYXRzIGFuZCBpbnRlZ2VycyAobm8gb2N0YWxzIG9yIGhleGFkZWNpbWFscykgYXMKICAgIHdlbGwuCiAgKiBBZGRlZCBhbGlhc2VzIGdlbmVyYXRlIGFuZCBgcHJldHR5X2dlbmVyYXRlYCBvZiB1bnBhcnNlIGFuZCBgcHJldHR5X3VucGFyc2VgLgogICogRml4ZWQgYSB0ZXN0IGNhc2UuCiAgKiBDYXRjaCBhbiBgSWNvbnY6OkludmFsaWRFbmNvZGluZ2AgZXhjZXB0aW9uLCB0aGF0IHNlZW1zIHRvIG9jY3VyIG9uIHNvbWUgU3VuCiAgICBib3hlcyB3aXRoIFN1bk9TIDUuOCwgaWYgaWNvbnYgZG9lc24ndCBzdXBwb3J0IHV0ZjE2IGNvbnZlcnNpb25zLiBUaGlzIHdhcwogICAgcmVwb3J0ZWQgYnkgQW5kcmV3IFIgSmFja3NvbiA8YW5kcmV3akBiY20udG1jLmVkdT4sIHRoYW5rcyBhIGJ1bmNoIQoKIyMgMjAwNi0wOC0yNSAoMC40LjIpCiAgKiBGaXhlZCBhIGJ1ZyBpbiBoYW5kbGluZyBzb2xpZGkgKC8tY2hhcmFjdGVycyksIHRoYXQgd2FzIHJlcG9ydGVkIGJ5CiAgICBLZXZpbiBHaWxwaW4gPGtldmluLmdpbHBpbkBhbHVtLm1pdC5lZHU+LgoKIyMgMjAwNi0wMi0wNiAoMC40LjEpCiAgKiBGaXhlZCBhIGJ1ZyByZWxhdGVkIHRvIGVzY2FwaW5nIHdpdGggYmFja3NsYXNoZXMuIFRoYW5rcyBmb3IgdGhlIHJlcG9ydCBnbwogICAgdG8gRmxvcmlhbiBNdW56IDxzdXJmQHRoZWZsb3cuZGU+LgoKIyMgMjAwNS0wOS0yMyAoMC40LjApCiAgKiBJbml0aWFsIFJ1Ynlmb3JnZSBWZXJzaW9uCg==
  recorded_at: Fri, 13 Dec 2024 04:09:15 GMT
recorded_with: VCR 6.3.1
