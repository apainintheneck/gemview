---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/standardrb/standard/refs/tags/v1.42.1/README.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '22477'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"7456d1b4e91ab394acb4786b3453cc4e5408cb5e17fe9208ec93ed558a997b7c"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 4C80:16A4CA:79BE24:7C69DA:6754F846
      Accept-Ranges:
      - bytes
      Date:
      - Sun, 08 Dec 2024 01:37:11 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-pao-kpao1770037-PAO
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1733621832.779365,VS0,VE206
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 4785f08399e0818aac41b9aab5b36b5cbfd90f14
      Expires:
      - Sun, 08 Dec 2024 01:42:11 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 08 Dec 2024 01:37:11 GMT
recorded_with: VCR 6.3.1
